{"version":3,"sources":["components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","App","changeJoke","joke","isPending","className","onClick","connect","dispatch","type","fetch","then","response","json","data","payload","catch","Boolean","window","location","hostname","match","initialStateJoke","logger","createLogger","store","createStore","action","Object","assign","value","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"gTAsBeA,E,kDAnBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACL,yDAEFG,KAAKL,MAAMO,a,GAhBMC,aCmBtBC,G,wLAEJJ,KAAKL,MAAMU,e,+BAGF,IAAD,EACgCL,KAAKL,MAArCW,EADA,EACAA,KAAMC,EADN,EACMA,UAAWF,EADjB,EACiBA,WAEzB,OACE,yBAAKG,UAAU,aACd,kDACA,4BAAQC,QAASJ,GAAjB,YACA,kBAAC,EAAD,KACEE,EACD,uBAAGC,UAAU,6CAAb,WACA,uBAAGA,UAAU,uCAAuCF,S,GAfxCH,cAsBHO,eApCS,SAACd,GACxB,MAAO,CACNU,KAAMV,EAAMU,KACZC,UAAWX,EAAMW,UACjBT,MAAOF,EAAME,UAIY,SAACa,GAC3B,MAAO,CACNN,WAAY,kBAAMM,GCPS,SAACA,GAC7BA,EAAS,CAAEC,KCXwB,yBDanCC,MAAM,2CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIN,EAAS,CAAEC,KCdU,uBDckBM,QAASD,OAC7DE,OAAM,SAAArB,GAAK,OAAIa,EAAS,CAACC,KCdQ,sBDcmBM,QAASpB,cD2BhDY,CAA6CN,GG/BxCgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAmB,CACvBnB,KAAM,GACNC,WAAW,EACXT,MAAO,ICEH4B,EAASC,yBACTC,EAAQC,aDAS,WAAwC,IAAvCjC,EAAsC,uDAAhC6B,EAAkBK,EAAc,uDAAP,GACtD,OAAOA,EAAOlB,MACb,IFdkC,uBEejC,OAAOmB,OAAOC,OAAO,GAAIpC,EAAO,CAAEW,WAAW,IAC9C,IFfkC,uBEgBjC,OAAOwB,OAAOC,OAAO,GAAIpC,EAAO,CAAEU,KAAMwB,EAAOZ,QAAQe,MAAO1B,WAAW,IAC1E,IFhBiC,sBEiBhC,OAAOwB,OAAOC,OAAO,GAAIpC,EAAO,CAAEE,MAAOgC,EAAOZ,QAASX,WAAW,IACrE,QACC,OAAOX,KCTyBsC,YAAgBC,IAAiBT,IAEpEU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,EAAD,QAGJW,SAASC,eAAe,SF+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd1B,OAAM,SAAArB,GACLgD,QAAQhD,MAAMA,EAAMiD,c","file":"static/js/main.6eee415a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1>Oooops. That is not good.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nimport { getJoke } from '../actions';\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tjoke: state.joke,\n\t\tisPending: state.isPending,\n\t\terror: state.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tchangeJoke: () => dispatch(getJoke())\n\t}\n}\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.changeJoke();\n\t}\n\n\trender() {\n\t\tconst { joke, isPending, changeJoke } = this.props;\n\n\t\treturn (\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<h1>Chuck Norris Jokes</h1>\n\t\t\t\t\t<button onClick={changeJoke}>New Joke</button>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t{isPending ?\n\t\t\t\t\t\t<p className='loading animate__animated animate__zoomIn'>LOADING</p> :\n\t\t\t\t\t\t<p className='animate__animated animate__rotateIn'>{joke}</p>}\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  REQUEST_JOKE_PENDING,\n  REQUEST_JOKE_SUCCESS,\n  REQUEST_JOKE_FAILED\n} from './constants.js';\n\n\n// Higher order function. A function that returns a function.\n// Redux doesn't understand a function that returns a function, since it's looking for an object.\n// Redux thunk is listening for actions that return functions, so the actions can be dispatched.\nexport const getJoke = () => (dispatch) => {\n\tdispatch({ type: REQUEST_JOKE_PENDING });\n\n\tfetch('https://api.chucknorris.io/jokes/random')\n\t.then(response => response.json())\n\t.then(data => dispatch({ type: REQUEST_JOKE_SUCCESS, payload: data }))\n\t.catch(error => dispatch({type: REQUEST_JOKE_FAILED, payload: error }));\n}\n","export const REQUEST_JOKE_PENDING = 'REQUEST_JOKE_PENDING';\nexport const REQUEST_JOKE_SUCCESS = 'REQUEST_JOKE_SUCCESS';\nexport const REQUEST_JOKE_FAILED = 'REQUEST_JOKE_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  REQUEST_JOKE_PENDING,\n  REQUEST_JOKE_SUCCESS,\n  REQUEST_JOKE_FAILED\n} from './constants.js';\n\nconst initialStateJoke = {\n  joke: '',\n  isPending: false,\n  error: ''\n};\n\nexport const getJoke = (state=initialStateJoke, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_JOKE_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true });\n\t\tcase REQUEST_JOKE_SUCCESS:\n\t\t\treturn Object.assign({}, state, { joke: action.payload.value, isPending: false });\n\t\tcase REQUEST_JOKE_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { getJoke } from './reducers';\n\nconst logger = createLogger();\nconst store = createStore(getJoke, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}